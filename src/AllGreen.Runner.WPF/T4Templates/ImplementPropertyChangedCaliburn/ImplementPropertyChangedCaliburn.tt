<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="CodeModelUtils.ttinclude" #>
<#@ output extension=".Generated.cs" #>
<#
	if (Session.ContainsKey("InputFileName"))
	{
		FileCodeModel codeModel = GetCodeModel(Session["InputFileName"] as string);

		//WriteLine("/*"); DumpElements(codeModel.CodeElements); WriteLine("*/");

		OutputUsings();

		ProcessElements(codeModel, codeModel.CodeElements);
	} else {
		WriteLine("using System;");
		WriteLine("");
		WriteLine("namespace " + ImplementPropertyChangedCaliburnAttributeNamespace);
		WriteLine("{");
		PushIndent("\t");
		WriteLine("[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]");
		WriteLine("[AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)]");
		WriteLine("internal class " + ImplementPropertyChangedCaliburnAttributeName + " : Attribute");
		WriteLine("{");
		PushIndent("\t");
		WriteLine("public " + ImplementPropertyChangedCaliburnAttributeName + "(Type aInterface)");
        WriteLine("{");
		PushIndent("\t");
        WriteLine("Interface = aInterface;");
		PopIndent();
        WriteLine("}");

        WriteLine("public Type Interface { get; private set; }");
		PopIndent();
        WriteLine("}");
		PopIndent();
        WriteLine("}");
	}
#>
<#+
	const string ImplementPropertyChangedCaliburnAttributeNamespace = "TemplateAttributes";
	const string ImplementPropertyChangedCaliburnAttributeName = "ImplementPropertyChangedCaliburnAttribute";
	const string ImplementPropertyChangedCaliburnAttributeFullName = ImplementPropertyChangedCaliburnAttributeNamespace + "." + ImplementPropertyChangedCaliburnAttributeName;

	private void OutputUsings() 
	{
		WriteLine("using System;");
		WriteLine("using System.ComponentModel;");
		WriteLine("using System.Linq;");
		WriteLine("using System.Linq.Expressions;");
		WriteLine("using Caliburn.Micro;");
		WriteLine("");
	}

	private void ProcessClass(FileCodeModel codeModel, CodeClass codeClass, bool emptyLineBefore)
	{
		if (!IsPartialClass(codeClass)) return;

		List<CodeInterface> interfaces = GetInterfacesToImplement(codeModel, codeClass, ImplementPropertyChangedCaliburnAttributeFullName);
		bool needsPropertyChangedBase = NeedsPropertyChangedBase(codeClass, interfaces);

		if (emptyLineBefore) WriteLine("");
		OutputClassHeader(codeClass, needsPropertyChangedBase ? ": PropertyChangedBase" : "");

		if (interfaces.Count > 0)
		{
			List<CodeFunction> changeMethods = GetClassChangeMethods(codeClass);
			foreach (CodeInterface iface in interfaces)
				OutputInterfaceProperties(iface, changeMethods);
		}

		bool firstElement = true;
		foreach (CodeElement element in codeClass.Children)
		{
			CodeClass innerCodeClass = element as CodeClass;
			if (innerCodeClass != null)
			{
				ProcessClass(codeModel, innerCodeClass, !firstElement);
				firstElement = false;
			}
		}

		if (needsPropertyChangedBase)
			OutputClassNotifyPropertyChangedImplementation(codeClass);

		OutputClassFooter(codeClass);
	}

	private bool NeedsPropertyChangedBase(CodeClass codeClass, List<CodeInterface> interfaces)
	{
		return !GetClassBases(codeClass).Any(cc => InheritsPropertyChangedBase(cc)) && (interfaces.Count > 0);
	}

	private bool InheritsPropertyChangedBase(CodeClass codeClass)
	{
		return GetClassBases(codeClass).Any(cc => cc.FullName == "Caliburn.Micro.PropertyChangedBase" || InheritsPropertyChangedBase(cc));
	}

	private List<CodeFunction> GetClassChangeMethods(CodeClass codeClass)
	{
		return GetClassFunctions(codeClass).Where(cf => cf.Name.StartsWith("On") && cf.Name.EndsWith("Changed")).ToList();
	}

	private void OutputInterfaceProperties(CodeInterface codeInterface, List<CodeFunction> changeMethods)
	{
		WriteLine("#region " + codeInterface.Name);
		WriteLine("");
		foreach (CodeProperty codeProperty in codeInterface.Members.OfType<CodeProperty>())
		{
			OutputProperty(codeProperty, changeMethods, codeProperty.Setter == null);
			WriteLine("");
		}
		WriteLine("#endregion");
	}

	private void OutputProperty(CodeProperty codeProperty, List<CodeFunction> changeMethods, bool setterPrivate)
	{
		string propertyTypeName = codeProperty.Type.CodeType.FullName;
		string storeName = "_" + codeProperty.Name;
		WriteLine("private " + propertyTypeName + " " + storeName + ";");
		WriteLine("public " + propertyTypeName + " " + codeProperty.Name);
		WriteLine("{");
		PushIndent("\t");

		if (codeProperty.Getter != null)
			WriteLine("get { return " + storeName + "; }");

		string changeCommand = "";
		if (setterPrivate)
			changeCommand += "private ";
		changeCommand += "set { ChangeProperty<" + propertyTypeName + ">(\"" + codeProperty.Name + "\", ref " + storeName + ", value";
		CodeFunction codeFunction = changeMethods.FirstOrDefault(cf => cf.Name == "On" + codeProperty.Name + "Changed");
		if (codeFunction != null)
		{
			if (codeFunction.Parameters.Count == 2)
				changeCommand += ", changedCallback: " + codeFunction.Name;
			else
				changeCommand += ", changedCallback: " + "(o, n) => " + codeFunction.Name + "()";
		}
		changeCommand += "); }";
		WriteLine(changeCommand);

		PopIndent();
		WriteLine("}");
	}

	private void OutputClassNotifyPropertyChangedImplementation(CodeClass codeClass)
	{
		WriteLine("");
		WriteLine("#region INotifyPropertyChanged implementation");
		WriteLine("");
		WriteLine("[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]");
		WriteLine("protected virtual void ChangeProperty<T>(string propertyName, ref T propertyValue, T newValue, Action<T, T> changedCallback = null)");
		WriteLine("{");
		PushIndent("\t");
		WriteLine("if ((propertyValue == null && newValue == null) || (propertyValue != null && propertyValue.Equals(newValue))) return;");
        WriteLine("T oldValue = propertyValue;");
		WriteLine("propertyValue = newValue;");
		WriteLine("NotifyOfPropertyChange(propertyName);");
        WriteLine("if (changedCallback != null) changedCallback(oldValue, newValue);");
		PopIndent();
		WriteLine("}");
		WriteLine("");

		WriteLine("[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]");
        WriteLine("public string GetPropertyName<TProperty>(Expression<Func<" + codeClass.FullName + ", TProperty>> propertySelector)");
        WriteLine("{");
		PushIndent("\t");
        WriteLine("return propertySelector.GetMemberInfo().Name;");
		PopIndent();
        WriteLine("}");

		WriteLine("");
		WriteLine("#endregion");
	}

#>