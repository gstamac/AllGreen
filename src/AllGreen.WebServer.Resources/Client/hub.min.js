var AllGreen;(function(n){var t=function(){function n(n,t){this.connection=n,this.env=t,t.setServerStatus("Disconnected")}return n.prototype.connect=function(){this.attachToHub(this.connection,this.env),this.attachToConnectionEvents(this.connection,this.env),this.startConnection(this.connection,this.env)},n.prototype.attachToHub=function(n,t){n.createHubProxy("runnerHub").on("reload",function(){console.log("reloading..."),t.reload()})},n.prototype.attachToConnectionEvents=function(n,t){var i=this;n.stateChanged(function(n){console.log("state changed ",n,i.stateString(n.oldState)," -> ",i.stateString(n.newState))}),n.error(function(n){console.log("error",n),t.setServerStatus("Error: "+n)}),n.reconnecting(function(){console.log("reconnecting"),t.setServerStatus("Reconnecting...")}),n.reconnected(function(){console.log("reconnected"),t.setServerStatus("Reconnected")}),n.disconnected(function(){console.log("disconnected"),t.setServerStatus("Disconnected")})},n.prototype.startConnection=function(n,t){n.start().done(function(){console.log("done"),t.setServerStatus("Done")})},n.prototype.stateString=function(n){return n===$.signalR.connectionState.connecting?"connecting":n===$.signalR.connectionState.connected?"connected":n===$.signalR.connectionState.reconnecting?"reconnecting":n===$.signalR.connectionState.disconnected?"disconnected":void 0},n}();n.Hub=t})(AllGreen||(AllGreen={})),function(){var n=AllGreen.App.getCurrent(),t,i;n!=null&&(console.log("registering signalR hub"),t=$.hubConnection(),i=new AllGreen.Hub(t,n),i.connect())}()