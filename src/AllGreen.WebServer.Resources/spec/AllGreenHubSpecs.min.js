var _this=this;describe("AllGreen SignalR Hub",function(){beforeEach(function(){_this.app=jasmine.createSpyObj("app",["reload","setServerStatus","specUpdated","log"]),_this.hubProxy=jasmine.createSpyObj("hubProxy",["on","invoke"]),_this.proxyCallback=null,_this.hubProxy.on.andCallFake(function(n,t){_this.proxyCallback=t});var n=["stateChanged","error","reconnecting","reconnected","disconnected"];_this.connection=jasmine.createSpyObj("connection",n.concat(["createHubProxy","start","received"])),_this.connection.createHubProxy.andReturn(_this.hubProxy),_this.connection.start.andReturn({done:function(n){_this.connectionCallbacks.done=n}}),_this.connection.id="connectionId",_this.connectionCallbacks=[],n.forEach(function(n){_this.connection[n].andCallFake(function(t){_this.connectionCallbacks[n]=t})}),_this.hub=new AllGreen.Hub(_this.connection,_this.app)}),it("Starts as disconnected",function(){expect(_this.app.setServerStatus).toHaveBeenCalledWith("Disconnected")}),it("Connects to server",function(){var n=_this.hub.connect();expect(n).toBeDefined(),expect(_this.connection.createHubProxy).toHaveBeenCalledWith("runnerHub"),expect(_this.connection.start).toHaveBeenCalled(),expect(_this.hubProxy.on).toHaveBeenCalledWith("reload",jasmine.any(Function)),expect(_this.proxyCallback).toEqual(jasmine.any(Function)),expect(_this.connectionCallbacks.done).toEqual(jasmine.any(Function)),_this.connectionCallbacks.done(),expect(_this.app.setServerStatus).toHaveBeenCalledWith("Connected")}),it("Should initialize after connect",function(){var n=_this.hub.connect();_this.connectionCallbacks.done(),expect(n.invoke).toHaveBeenCalledWith("register","connectionId",jasmine.any(String))}),it("Calls Env.reload on reload message",function(){_this.hub.connect(),_this.proxyCallback(),expect(_this.app.reload).toHaveBeenCalled()}),it("Displays status on error",function(){_this.hub.connect(),expect(_this.connectionCallbacks.error).toEqual(jasmine.any(Function)),_this.connectionCallbacks.error("ERROR"),expect(_this.app.setServerStatus).toHaveBeenCalledWith("Error: ERROR")}),[{method:"reconnecting",status:"Reconnecting..."},{method:"reconnected",status:"Reconnected"},{method:"disconnected",status:"Disconnected"}].forEach(function(n){it("Displays status on "+n.method,function(){_this.hub.connect(),expect(_this.connectionCallbacks[n.method]).toEqual(jasmine.any(Function)),_this.connectionCallbacks[n.method](),expect(_this.app.setServerStatus).toHaveBeenCalledWith(n.status)})})}),describe("AllGreen SignalR HubReporter",function(){beforeEach(function(){_this.hubProxy=jasmine.createSpyObj("hubProxy",["invoke"]),_this.hubProxy.connection={id:"connectionId"},_this.hubReporter=new AllGreen.HubReporter(_this.hubProxy)}),it("Should report started",function(){_this.hubReporter.started(10),expect(_this.hubProxy.invoke).toHaveBeenCalledWith("started","connectionId",10)}),["reset","finished"].forEach(function(n){it("Should report "+n,function(){_this.hubReporter[n](),expect(_this.hubProxy.invoke).toHaveBeenCalledWith(n,"connectionId")})}),it("Should report specUpdated",function(){var n={id:123,name:"test 1",suite:null,status:AllGreen.SpecStatus.Passed,steps:[]};_this.hubReporter.specUpdated(n),expect(_this.hubProxy.invoke).toHaveBeenCalledWith("specUpdated","connectionId",n)})})